{"version":3,"sources":["Screenshots.js","ScreenshotCount.js","App.js","serviceWorker.js","index.js"],"names":["SCREENSHOTS_QUERY","gql","_templateObject","Screenshots","react_default","a","createElement","react_apollo_esm","query","pollInterval","_ref","loading","error","data","screenshots","map","_ref2","id","link","className","alt","src","key","Component","SCREENSHOT_COUNT_QUERY","ScreenshotCount_templateObject","ScreenshotCount","screenshots_aggregate","aggregate","count","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","split","_getMainDefinition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","App","src_ScreenshotCount","src_Screenshots","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8eAIA,IAAMA,EAAoBC,IAAHC,KA4BRC,mLAjBP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOR,EAAmBS,aAAc,KAC1C,SAAAC,GAA4B,IAA1BC,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,KACf,OAAIF,EAAgBP,EAAAC,EAAAC,cAAA,uBAChBM,EAAcR,EAAAC,EAAAC,cAAA,qBAEXO,EAAKC,YAAYC,IAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,GAAIC,EAANF,EAAME,KAAN,OACxBd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,mCACXf,EAAAC,EAAAC,cAAA,OAAKa,UAAU,YAAYC,IAAI,qBAAqBC,IAAKH,EAAMI,IAAKL,gBAVtEM,2LCT1B,IAAMC,EAAyBvB,IAAHwB,KA6BbC,mLAjBP,OACItB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOgB,EAAwBf,aAAc,KAC/C,SAAAC,GAA4B,IAA1BC,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,KACf,OAAIF,EAAgBP,EAAAC,EAAAC,cAAA,uBAChBM,EAAcR,EAAAC,EAAAC,cAAA,qBAGdF,EAAAC,EAAAC,cAAA,MAAIa,UAAU,eACTN,EAAKc,sBAAsBC,UAAUC,MAD1C,qCATMN,aCGxBO,SAAW,IAAIC,IAAS,CAC1BC,IAJqB,4CAOnBC,EAAS,IAAIC,IAAc,CAC7BF,IAPwB,uCAQxBG,QAAS,CACLC,WAAW,KAIblB,EAAOmB,YAET,SAAA3B,GAAe,IAAZF,EAAYE,EAAZF,MAAY8B,EACiBC,YAAkB/B,GAAtCgC,EADGF,EACHE,KAAMC,EADHH,EACGG,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,GAE7CR,EACAH,GAGEY,EAAS,IAAIC,IAAa,CAC5BzB,OACA0B,MAAO,IAAIC,MAwBAC,mLAnBX,OACI1C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBmC,OAAQA,GACpBtC,EAAAC,EAAAC,cAAA,OAAKa,UAAU,aACXf,EAAAC,EAAAC,cAAA,MAAIa,UAAU,yBAAd,4BAGAf,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,MAAIa,UAAU,eAAd,6BAGAf,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACXf,EAAAC,EAAAC,cAAC0C,EAAD,gBAbFzB,mBC/BE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.243d2f9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SCREENSHOTS_QUERY = gql`\n    {\n        screenshots(order_by: {id: desc}, limit: 8) {\n            id\n            link\n        }\n    }\n`;\n\nclass Screenshots extends Component {\n    render() {\n        return (\n            <Query query={SCREENSHOTS_QUERY} pollInterval={500}>\n                {({loading, error, data}) => {\n                    if (loading) return <p>Loading...</p>;\n                    if (error) return <p>Error :(</p>;\n\n                    return data.screenshots.map(({id, link}) => (\n                        <div className=\"col-lg-3 p-2 border border-dark\">\n                            <img className=\"img-fluid\" alt=\"selenia-screenshot\" src={link} key={id}/>\n                        </div>\n                    ));\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default Screenshots;\n","import React, { Component } from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst SCREENSHOT_COUNT_QUERY = gql`\n    {\n      screenshots_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n`;\n\nclass ScreenshotCount extends Component {\n    render() {\n        return (\n            <Query query={SCREENSHOT_COUNT_QUERY} pollInterval={500}>\n                {({loading, error, data}) => {\n                    if (loading) return <p>Loading...</p>;\n                    if (error) return <p>Error :(</p>;\n\n                    return (\n                        <h3 className=\"text-center\">\n                            {data.screenshots_aggregate.aggregate.count} total screenshots taken\n                        </h3>\n                    );\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default ScreenshotCount;","import React, { Component } from 'react';\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloClient } from \"apollo-client\";\nimport { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink} from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport Screenshots from \"./Screenshots\";\nimport ScreenshotsCount from \"./ScreenshotCount\";\n\nimport './app.css';\n\nconst GRAPHQL_ENDPOINT = 'http://134.209.57.101/v1alpha1/graphql';\nconst GRAPHQL_WS_ENDPOINT = 'ws://134.209.57.101/v1alpha1/graphql';\n\nconst httpLink = new HttpLink({\n    uri: GRAPHQL_ENDPOINT\n});\n\nconst wsLink = new WebSocketLink({\n    uri: GRAPHQL_WS_ENDPOINT,\n    options: {\n        reconnect: true\n    }\n});\n\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const { kind, operation } = getMainDefinition(query);\n        return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    httpLink,\n);\n\nconst client = new ApolloClient({\n    link,\n    cache: new InMemoryCache()\n});\n\nclass App extends Component {\n  render() {\n    return (\n        <ApolloProvider client={client}>\n            <div className=\"container\">\n                <h1 className=\"display-4 text-center\">\n                    Selenia Screenshots Demo\n                </h1>\n                <ScreenshotsCount/>\n                <h1 className=\"text-center\">\n                    8 most recent screenshots\n                </h1>\n                <div className=\"row\">\n                    <Screenshots/>\n                </div>\n            </div>\n        </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}